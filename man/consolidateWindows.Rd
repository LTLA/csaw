\name{consolidateWindows}
\alias{consolidateWindows}
\alias{consolidateSizes}

\title{Consolidate window sizes}
\description{Consolidate DB results from multiple window sizes.}

\usage{
consolidateWindows(data.list, result.list, equiweight=TRUE, merge.args=list(),
    combine.args=list(), region=NULL, overlap.args=list()) 

# Deprecated, use consolidateTests or consolidateOverlaps instead!
consolidateSizes(data.list, result.list, equiweight=TRUE, merge.args=list(),
    combine.args=list(), region=NULL, overlap.args=list(), ...)
}

\arguments{
\item{data.list}{A list of RangedSummarizedExperiment and/or GRanges objects.}
\item{result.list}{A list of data.frames containing the DB test results for each entry of \code{data.list}.}
\item{equiweight}{A logical scalar indicating whether equal weighting from each window size should be enforced.}
\item{merge.args}{A named list of parameters to pass to \code{\link{mergeWindows}}.}
\item{region}{A \code{GRanges} object specifying regions of interest for overlapping with windows.}
\item{overlap.args}{A named list of parameters to pass to \code{\link{findOverlaps}}.}
\item{...}{Further arguments to pass to \code{\link{consolidateTests}} or \code{\link{consolidateOverlaps}}.}
}

\value{
If \code{region=NULL}, a named list is returned containing:
\describe{
\item{\code{id}:}{A list of integer vectors, where each vector corresponds to an object in \code{data.list}.
The entries of the vector specify the cluster to which each window of that object is assigned.}
\item{\code{weight}:}{A list of numeric vectors, where each vector corresponds to a vector in \code{id}.
The entries of the vector specify the weight of the corresponding windows.}
\item{\code{region}:}{a GRanges object containing the genomic coordinates of the clusters of merged windows.}
}

If \code{region} is not \code{NULL}, a named list is returned containing:
\describe{
\item{\code{olap}:}{A list of Hits object, where each object corresponds to an object in \code{data.list}.
Each Hits object contains the overlaps between the input \code{regions} (query) and the windows in the corresponding object in \code{data.list} (subject).}
\item{\code{weight}:}{A list of numeric vectors, where each vector corresponds to a Hits object in \code{olap}.
The entries of the vector specify the per-overlap weight of the corresponding windows.}
}
}

\details{
This function merges windows of differing sizes, generated by multiple calls to \code{\link{windowCounts}} using different \code{width} values.
If \code{region=NULL}, windows of all sizes are clustered together through \code{\link{mergeWindows}}, using a default tolerance of 100 bp.
Otherwise, clusters are defined by overlapping windows of all sizes to \code{region} using \code{\link{findOverlaps}}, where each entry of \code{region} defines a cluster.
    
The aim is to consolidate statistics across window sizes using \code{\link{consolidateTests}} or \code{\link{consolidateOverlaps}}.
This will provide comprehensive detection of DB at a range of spatial resolutions.
However, this requires some care to balance the contribution of analyses with different window sizes to the combined p-value.
This is achieved by weighting each window and using the weights in downstream functions.

By default, we set \code{equiweight=TRUE} to offset the differences in the number of windows of each size per cluster.
The weight of each window is inversely proportional to the number of windows of the same size within a given cluster.
If \code{region!=NULL}, the weight of each overlap is inversely proportional to the number of overlaps involving windows of the same size to the given region.
This ensures that the combined p-value is not fully determined by numerous small windows within a cluster.
}

\seealso{
\code{\link{windowCounts}},
\code{\link{mergeWindows}},
\code{\link{findOverlaps}},
\code{\link{consolidateTests}},
\code{\link{consolidateOverlaps}}
}

\author{
Aaron Lun
}

\examples{
bamFiles <- system.file("exdata", c("rep1.bam", "rep2.bam"), package="csaw")
low <- windowCounts(bamFiles, width=1, filter=1)
med <- windowCounts(bamFiles, width=100, filter=1)
high <- windowCounts(bamFiles, width=500, filter=1)

# Consolidating.
cons <- consolidateSizes(list(low, med, high), list(dbl, dbm, dbh),
	merge.args=list(tol=100, max.width=300))
cons$region
cons$id
cons$weights

# Trying with a custom region.
of.interest <- GRanges(c('chrA', 'chrA', 'chrB', 'chrC'), 
    IRanges(c(1, 500, 100, 1000), c(200, 1000, 700, 1500)))
cons <- consolidateSizes(list(low, med, high), list(dbl, dbm, dbh),
    region=of.interest)
cons$table
cons$id
}

\keyword{clustering}
